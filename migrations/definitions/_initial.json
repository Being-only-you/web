{"schemas":"DEFINE TABLE action_reset_password SCHEMAFULL DROP PERMISSIONS FULL;\nDEFINE FIELD email ON TABLE action_reset_password TYPE string ASSERT string::is::email($value);\nDEFINE FIELD secret ON TABLE action_reset_password TYPE string;\nDEFINE FIELD password ON TABLE action_reset_password TYPE string VALUE crypto::argon2::generate($value);\nDEFINE TABLE admin SCHEMAFULL\n  PERMISSIONS\n    FOR select, update, delete, create WHERE $scope = 'admin';\n\nDEFINE FIELD name ON TABLE admin TYPE string ASSERT array::len(string::words($value)) > 1;\nDEFINE FIELD email ON TABLE admin TYPE string ASSERT string::is::email($value);\nDEFINE FIELD password ON TABLE admin TYPE string PERMISSIONS FOR select NONE;\n\nDEFINE FIELD created ON TABLE admin TYPE datetime VALUE $before OR time::now();\nDEFINE FIELD updated ON TABLE admin TYPE datetime VALUE time::now();\n\nDEFINE INDEX email ON TABLE admin COLUMNS email UNIQUE;\nDEFINE TABLE application SCHEMAFULL\n  PERMISSIONS\n    FOR select WHERE ($scope = 'user' && applicant = $auth.id)\n      OR ($scope = 'admin')\n      OR ($scope = 'business' && job_posting.business = $auth.id)\n    FOR update WHERE ($scope = 'admin')\n      OR ($scope = 'business' && job_posting.business = $auth.id)\n    FOR delete WHERE $scope = 'admin'\n    FOR create WHERE $scope = 'user' OR $scope = 'admin';\n\nDEFINE FIELD applicant ON application TYPE record(user) ASSERT $value != NONE;\nDEFINE FIELD job_posting ON application TYPE record(job_posting) ASSERT $value != NONE;\nDEFINE FIELD cv ON application TYPE record(cv) ASSERT $value != NONE;\nDEFINE FIELD cover_letter ON application TYPE string;\nDEFINE FIELD current_stage ON application TYPE string;\nDEFINE FIELD stages ON application TYPE array;\nDEFINE FIELD stage_history ON application TYPE array;\nDEFINE FIELD ats_score ON application TYPE float;\nDEFINE FIELD created_at ON application TYPE datetime DEFAULT time::now();\nDEFINE FIELD updated_at ON application TYPE datetime DEFAULT time::now();\n\nDEFINE INDEX applicant_job ON application FIELDS applicant, job_posting UNIQUE;\nDEFINE INDEX application_current_stage ON application FIELDS current_stage;\nDEFINE FUNCTION fn::initiate_application($applicant_id: record(user), $job_posting_id: record(job_posting), $cv_id: record(cv), $cover_letter: string) {\n    LET $business = (SELECT business FROM job_posting WHERE id = $job_posting_id);\n    LET $initial_stage = (SELECT name, order FROM application_stage_config WHERE business = $business ORDER BY order ASC LIMIT 1);\n\n    CREATE application SET\n        applicant = $applicant_id,\n        job_posting = $job_posting_id,\n        cv = $cv_id,\n        cover_letter = $cover_letter,\n        current_stage = $initial_stage.name,\n        stages = [(SELECT name, order FROM application_stage_config WHERE business = $business ORDER BY order ASC)],\n        stage_history = [{\n            stage: $initial_stage.name,\n            timestamp: time::now(),\n            notes: \"Application submitted\"\n        }],\n        ats_score = fn::calculate_initial_ats_score($cv_id, $job_posting_id)\n};\n\nDEFINE FUNCTION fn::calculate_initial_ats_score($cv_id: record(cv), $job_posting_id: record(job_posting)) {\n    LET $cv = (SELECT * FROM cv WHERE id = $cv_id);\n    LET $job_posting = (SELECT * FROM job_posting WHERE id = $job_posting_id);\n    \n    LET $keyword_match_score = array::len(array::intersect($job_posting.keywords, $cv.keywords)) / array::len($job_posting.keywords);\n    LET $skill_match_score = array::len(array::intersect($job_posting.skills, $cv.skills)) / array::len($job_posting.skills);\n    \n    RETURN ($keyword_match_score * 0.5 + $skill_match_score * 0.5) * 100\n};\n\nDEFINE FUNCTION fn::get_application_timeline($application_id: record(application)) {\n    LET $application = (SELECT * FROM application WHERE id = $application_id);\n    \n    RETURN (\n        SELECT \n            stage_history,\n            stages,\n            current_stage\n        FROM $application\n    )\n};\nDEFINE TABLE application_stage_config SCHEMAFULL\n  PERMISSIONS\n    FOR select WHERE true\n    FOR update, delete WHERE ($scope = 'admin')\n      OR ($scope = 'business' && business = $auth.id)\n    FOR create WHERE $scope = 'admin' OR $scope = 'business';\n\nDEFINE FIELD business ON application_stage_config TYPE record(business) ASSERT $value != NONE;\nDEFINE FIELD name ON application_stage_config TYPE string;\nDEFINE FIELD order ON application_stage_config TYPE int;\nDEFINE FIELD description ON application_stage_config TYPE string;\nDEFINE FIELD required_fields ON application_stage_config TYPE array;\nDEFINE FIELD optional_fields ON application_stage_config TYPE array;\nDEFINE FIELD created_at ON application_stage_config TYPE datetime DEFAULT time::now();\nDEFINE FIELD updated_at ON application_stage_config TYPE datetime DEFAULT time::now();\n\nDEFINE INDEX business_stage_order ON application_stage_config FIELDS business, order UNIQUE;\nDEFINE SCOPE user \n    SIGNIN ( SELECT * FROM user WHERE (email = $identifier OR username = $identifier) AND crypto::argon2::compare(password, $password) )\n;\n\nDEFINE SCOPE admin SESSION 1h\n    SIGNIN ( SELECT * FROM admin WHERE email = $identifier AND crypto::argon2::compare(password, $password) )\n;\n\nDEFINE SCOPE waitlist SESSION 1s\n    SIGNUP ( \n        INSERT IGNORE INTO waitlist (\n            SELECT email, recipient as name FROM send_email_verification WHERE template = 'waitlist' AND created + 1h > time::now() AND email = $email AND secret = $secret \n        )\n    )\n;\nDEFINE TABLE business SCHEMAFULL\n  PERMISSIONS\n    FOR select, update WHERE ($scope = 'admin')\n      OR ($scope = 'business' && id = $auth.id)\n    FOR delete WHERE $scope = 'admin'\n    FOR create WHERE $scope = 'admin';\n\nDEFINE FIELD name ON TABLE business TYPE string;\nDEFINE FIELD description ON TABLE business TYPE string;\nDEFINE FIELD industry ON TABLE business TYPE string;\nDEFINE FIELD size ON TABLE business TYPE string;\nDEFINE FIELD location ON TABLE business TYPE string;\nDEFINE FIELD website ON TABLE business TYPE string;\nDEFINE FIELD hiring_process ON TABLE business TYPE array;\nDEFINE FIELD ats_settings ON TABLE business TYPE object;\nDEFINE FIELD created ON TABLE business TYPE datetime VALUE $before OR time::now();\nDEFINE FIELD updated ON TABLE business TYPE datetime VALUE time::now();\n\nDEFINE INDEX name ON TABLE business COLUMNS name UNIQUE;\nDEFINE TABLE comment SCHEMAFULL\n  PERMISSIONS\n    FOR select WHERE fn::can_view_comment($auth.id, id)\n    FOR create, update, delete WHERE author = $auth.id;\n\nDEFINE FIELD post ON TABLE comment TYPE record(post) ASSERT $value != NONE;\nDEFINE FIELD author ON TABLE comment TYPE record(user) ASSERT $value != NONE;\nDEFINE FIELD content ON TABLE comment TYPE string;\nDEFINE FIELD created_at ON TABLE comment TYPE datetime VALUE $before OR time::now();\nDEFINE FIELD updated_at ON TABLE comment TYPE datetime VALUE time::now();\n\nDEFINE INDEX post_author ON TABLE comment COLUMNS post, author;\nDEFINE TABLE cv SCHEMAFULL\n  PERMISSIONS\n    FOR select WHERE ($scope = 'user' && user = $auth.id)\n      OR $scope = 'admin'\n      OR ($scope = 'business' && id IN (SELECT cv FROM application WHERE job_posting.business = $auth.id))\n    FOR update WHERE ($scope = 'user' && user = $auth.id) OR $scope = 'admin'\n    FOR delete WHERE ($scope = 'user' && user = $auth.id) OR $scope = 'admin'\n    FOR create WHERE $scope = 'user' OR $scope = 'admin';\n\nDEFINE FIELD user ON cv TYPE record(user) ASSERT $value != NONE;\nDEFINE FIELD full_name ON cv TYPE string;\nDEFINE FIELD email ON cv TYPE string ASSERT string::is::email($value);\nDEFINE FIELD phone ON cv TYPE string;\nDEFINE FIELD summary ON cv TYPE string;\nDEFINE FIELD experience ON cv TYPE array;\nDEFINE FIELD education ON cv TYPE array;\nDEFINE FIELD skills ON cv TYPE array;\nDEFINE FIELD certifications ON cv TYPE array;\nDEFINE FIELD languages ON cv TYPE array;\nDEFINE FIELD projects ON cv TYPE array;\nDEFINE FIELD publications ON cv TYPE array;\nDEFINE FIELD references ON cv TYPE array;\nDEFINE FIELD custom_sections ON cv TYPE object;\nDEFINE FIELD keywords ON cv TYPE array;\nDEFINE FIELD document_url ON cv TYPE string;\nDEFINE FIELD created_at ON cv TYPE datetime DEFAULT time::now();\nDEFINE FIELD updated_at ON cv TYPE datetime DEFAULT time::now();\nDEFINE FIELD version ON cv TYPE int VALUE $before.version + 1 OR 1;\n\nDEFINE INDEX cv_user ON cv FIELDS user UNIQUE;\nDEFINE INDEX cv_email ON cv FIELDS email;\nDEFINE INDEX cv_skills ON cv FIELDS skills;\nDEFINE INDEX cv_keywords ON cv FIELDS keywords SEARCH ANALYZER ascii BM25;\nDEFINE TABLE job_posting SCHEMAFULL\n  PERMISSIONS\n    FOR select WHERE true\n    FOR update, delete WHERE ($scope = 'admin')\n      OR ($scope = 'business' && business = $auth.id)\n    FOR create WHERE $scope = 'admin' OR $scope = 'business';\n\nDEFINE FIELD business ON job_posting TYPE record(business) ASSERT $value != NONE;\nDEFINE FIELD title ON job_posting TYPE string;\nDEFINE FIELD description ON job_posting TYPE string;\nDEFINE FIELD requirements ON job_posting TYPE array;\nDEFINE FIELD responsibilities ON job_posting TYPE array;\nDEFINE FIELD location ON job_posting TYPE string;\nDEFINE FIELD salary_range ON job_posting TYPE object;\nDEFINE FIELD job_type ON job_posting TYPE string;\nDEFINE FIELD department ON job_posting TYPE string;\nDEFINE FIELD industry ON job_posting TYPE string;\nDEFINE FIELD experience_level ON job_posting TYPE string;\nDEFINE FIELD education_level ON job_posting TYPE string;\nDEFINE FIELD skills ON job_posting TYPE array;\nDEFINE FIELD keywords ON job_posting TYPE array;\nDEFINE FIELD status ON job_posting TYPE string ASSERT $value INSIDE ['draft', 'published', 'closed'];\nDEFINE FIELD created_at ON job_posting TYPE datetime DEFAULT time::now();\nDEFINE FIELD updated_at ON job_posting TYPE datetime DEFAULT time::now();\n\nDEFINE INDEX business_title ON job_posting FIELDS business, title;\nDEFINE INDEX job_posting_keywords ON job_posting FIELDS keywords SEARCH ANALYZER ascii BM25;\nDEFINE INDEX job_posting_skills ON job_posting FIELDS skills;\n\nDEFINE TABLE personal_profile SCHEMAFULL\n  PERMISSIONS\n    FOR select, update WHERE ($scope = 'user' && user = $auth.id)\n      OR $scope = 'admin'\n    FOR delete WHERE ($scope = 'user' && user = $auth.id) OR $scope = 'admin'\n    FOR create WHERE $scope = 'user' OR $scope = 'admin';\n\nDEFINE FIELD user ON TABLE personal_profile TYPE record(user) ASSERT $value != NONE;\nDEFINE FIELD name ON TABLE personal_profile TYPE string;\nDEFINE FIELD bio ON TABLE personal_profile TYPE string;\nDEFINE FIELD birthdate ON TABLE personal_profile TYPE datetime;\nDEFINE FIELD location ON TABLE personal_profile TYPE string;\nDEFINE FIELD interests ON TABLE personal_profile TYPE array;\nDEFINE FIELD friends ON TABLE personal_profile TYPE array;\nDEFINE FIELD friend_requests ON TABLE personal_profile TYPE array;\nDEFINE FIELD qr_code ON TABLE personal_profile TYPE string;\n\nDEFINE INDEX user ON TABLE personal_profile COLUMNS user UNIQUE;\nDEFINE TABLE post SCHEMAFULL\n  PERMISSIONS\n    FOR select WHERE fn::can_view_post($auth.id, id)\n    FOR create, update, delete WHERE author = $auth.id;\n\nDEFINE FIELD author ON TABLE post TYPE record(user) ASSERT $value != NONE;\nDEFINE FIELD profile_type ON TABLE post TYPE string ASSERT $value IN ['personal', 'professional'];\nDEFINE FIELD content ON TABLE post TYPE string;\nDEFINE FIELD media_type ON TABLE post TYPE string;\nDEFINE FIELD media_url ON TABLE post TYPE string;\nDEFINE FIELD created_at ON TABLE post TYPE datetime VALUE $before OR time::now();\nDEFINE FIELD updated_at ON TABLE post TYPE datetime VALUE time::now();\n\nDEFINE INDEX author_profile ON TABLE post COLUMNS author, profile_type;\nDEFINE TABLE professional_profile SCHEMAFULL\n  PERMISSIONS\n    FOR select WHERE true\n    FOR update WHERE ($scope = 'user' && user = $auth.id) OR $scope = 'admin'\n    FOR delete WHERE ($scope = 'user' && user = $auth.id) OR $scope = 'admin'\n    FOR create WHERE $scope = 'user' OR $scope = 'admin';\n\nDEFINE FIELD user ON TABLE professional_profile TYPE record(user) ASSERT $value != NONE;\nDEFINE FIELD name ON TABLE professional_profile TYPE string;\nDEFINE FIELD title ON TABLE professional_profile TYPE string;\nDEFINE FIELD company ON TABLE professional_profile TYPE string;\nDEFINE FIELD summary ON TABLE professional_profile TYPE string;\nDEFINE FIELD skills ON TABLE professional_profile TYPE array;\nDEFINE FIELD experience ON TABLE professional_profile TYPE array;\nDEFINE FIELD education ON TABLE professional_profile TYPE array;\nDEFINE FIELD certifications ON TABLE professional_profile TYPE array;\nDEFINE FIELD connections ON TABLE professional_profile TYPE array;\nDEFINE FIELD cv ON TABLE professional_profile TYPE record(cv);\n\nDEFINE INDEX user ON TABLE professional_profile COLUMNS user UNIQUE;\nDEFINE TABLE reaction SCHEMAFULL\n  PERMISSIONS\n    FOR select WHERE fn::can_view_post($auth.id, post)\n    FOR create, update, delete WHERE user = $auth.id;\n\nDEFINE FIELD post ON TABLE reaction TYPE record(post) ASSERT $value != NONE;\nDEFINE FIELD user ON TABLE reaction TYPE record(user) ASSERT $value != NONE;\nDEFINE FIELD type ON TABLE reaction TYPE string ASSERT $value IN ['like', 'love', 'haha', 'wow', 'sad', 'angry'];\nDEFINE FIELD created_at ON TABLE reaction TYPE datetime VALUE $before OR time::now();\n\nDEFINE INDEX post_user ON TABLE reaction COLUMNS post, user UNIQUE;\nDEFINE TABLE script_migration SCHEMAFULL\n    PERMISSIONS\n        FOR select FULL\n        FOR create, update, delete NONE;\n\nDEFINE FIELD script_name ON script_migration TYPE string;\nDEFINE FIELD executed_at ON script_migration TYPE datetime VALUE time::now() READONLY;\nDEFINE TABLE user SCHEMAFULL \n  PERMISSIONS \n    FOR select, update WHERE ($scope = 'user' && id = $auth.id) \n      OR $scope = 'admin' \n    FOR delete WHERE ($scope = 'user' && id = $auth.id) OR $scope = 'admin' \n    FOR create WHERE $scope = 'admin';\n\nDEFINE FIELD email ON TABLE user TYPE string ASSERT string::is::email($value);\nDEFINE FIELD username ON TABLE user TYPE string ASSERT $value = /^[a-z0-9](?:[a-z0-9._-]{1,18}[a-z0-9.])$/;\nDEFINE FIELD password ON TABLE user TYPE string\n  PERMISSIONS \n    FOR select NONE \n    FOR update WHERE $scope = 'admin' \n      OR string::len(<string> (select * from user where id = $auth.id and crypto::argon2::compare(password, $oldpassword))) > 2\n;\n\nDEFINE FIELD created ON TABLE user TYPE datetime VALUE $before OR time::now();\nDEFINE FIELD updated ON TABLE user TYPE datetime VALUE time::now();\n\nDEFINE FIELD personal_profile ON TABLE user TYPE record(personal_profile);\nDEFINE FIELD professional_profile ON TABLE user TYPE record(professional_profile);\n\nDEFINE INDEX email ON TABLE user COLUMNS email UNIQUE;\nDEFINE INDEX username ON TABLE user COLUMNS username UNIQUE;\nDEFINE TABLE waitlist SCHEMAFULL\n  PERMISSIONS\n    FOR select, update, delete, create WHERE $scope = 'admin';\n\nDEFINE FIELD created ON waitlist TYPE datetime VALUE $before OR time::now();\nDEFINE FIELD email ON waitlist TYPE string ASSERT string::is::email($value);\nDEFINE FIELD name ON waitlist TYPE string;\nDEFINE FIELD updated ON waitlist TYPE datetime VALUE time::now();\n\nDEFINE INDEX email ON TABLE waitlist COLUMNS email UNIQUE;","events":"DEFINE EVENT email ON TABLE admin WHEN $before.email != $after.email AND $before.email != NONE AND $after.email != NONE THEN ( \n  CREATE event SET from=$before.email, to=$after.email, event=\"admin_email_changed\", field=$after.id\n);\nDEFINE EVENT name ON TABLE admin WHEN $before.name != $after.name AND $before.name != NONE AND $after.name != NONE THEN ( \n  CREATE event SET from=$before.name, to=$after.name, event=\"admin_name_changed\", field=$after.id\n);\n\nDEFINE EVENT password ON TABLE admin WHEN $before.password != $after.password AND $before.password != NONE AND $after.id != NONE THEN ( \n  CREATE event SET event=\"admin_password_changed\", field=$after.id\n);\nDEFINE EVENT application_stage_changed ON TABLE application WHEN $before.current_stage != $after.current_stage THEN (\n  CREATE event SET\n    type = \"application_stage_changed\",\n    application = $after.id,\n    from_stage = $before.current_stage,\n    to_stage = $after.current_stage,\n    applicant = $after.applicant,\n    job_posting = $after.job_posting,\n    business = $after.job_posting.business,\n    timestamp = time::now()\n);\nDEFINE EVENT application_status_changed ON TABLE application WHEN $before.status != $after.status THEN (\n  CREATE event SET\n    from = $before,\n    to = $after,\n    event = \"application_status_changed\",\n    user = $after.applicant,\n    business = $after.job_posting.business\n);\nDEFINE EVENT cv_updated ON TABLE cv WHEN $before != $after THEN (\n  CREATE event SET\n    from = $before,\n    to = $after,\n    event = \"cv_updated\",\n    user = $after.user\n);\nDEFINE EVENT job_posting_created ON TABLE job_posting WHEN $event = \"CREATE\" THEN (\n  CREATE event SET\n    to = $after,\n    event = \"job_posting_created\",\n    business = $after.business\n);\nDEFINE EVENT email ON TABLE user WHEN $before.email != $after.email AND $before.email != NONE AND $after.email != NONE THEN ( \n  CREATE event SET from=$before.email, to=$after.email, event=\"user_email_changed\", field=$after.id\n);\nDEFINE EVENT name ON TABLE user WHEN $before.name != $after.name AND $before.name != NONE AND $after.name != NONE THEN ( \n  CREATE event SET from=$before.name, to=$after.name, event=\"user_name_changed\", field=$after.id\n);\nDEFINE EVENT password ON TABLE user WHEN $before.password != $after.password AND $before.password != NONE AND $after.id != NONE THEN ( \n  CREATE event SET event=\"user_password_changed\", field=$after.id\n);\n\nDEFINE EVENT username ON TABLE user WHEN $before.username != $after.username AND $before.username != NONE AND $after.username != NONE THEN ( \n  CREATE event SET from=$before.username, to=$after.username, event=\"user_username_changed\", field=$after.id\n);"}